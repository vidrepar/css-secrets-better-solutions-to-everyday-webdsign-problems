


/**
 * Native modal dialog (limited support)
 */

dialog::backdrop {
	background: rgba(0,0,0,.8)
}


/**
 * Rudimetary overlay with box-shadow
 */

.lightbox {
	position: fixed;
	top: 50%; left: 50%;
	margin: -200px;
	box-shadow: 0 0 0 50vmax rgba(0,0,0,.8);
}
/**
 * Toggle buttons
 */

input[type="checkbox"] {
	position: absolute;
	clip: rect(0,0,0,0);
}

input[type="checkbox"] + label {
	display: inline-block;
	padding: .35em .5em .2em;
	background: #ccc;
	background-image: linear-gradient(#ddd, #bbb);
	border: 1px solid rgba(0,0,0,.2);
	border-radius: .3em;
	box-shadow: 0 1px white inset;
	text-align: center;
	text-shadow: 0 1px 1px white;
	cursor: pointer;
}

input[type="checkbox"]:checked + label,
input[type="checkbox"]:active + label {
	box-shadow: .04em .1em .2em rgba(0,0,0,.6) inset;
	border-color: rgba(0,0,0,.3);
	background: #bbb;
}

body {	font: 150%/1.6 sans-serif; }

/**
 * Custom checkboxes
 */

input[type="checkbox"] {
	position: absolute;
	clip: rect(0,0,0,0);
}

input[type="checkbox"] + label::before {
	content: '\a0';
	display: inline-block;
	vertical-align: .2em;
	width: .8em;
	height: .8em;
	margin-right: .2em;
	border-radius: .2em;
	background: silver;
	text-indent: .15em;
	line-height: .65;
}

input[type="checkbox"]:checked + label::before {
	content: '\2713';
	background: yellowgreen;
}

input[type="checkbox"]:focus + label::before {
	box-shadow: 0 0 .1em .1em #58a;
}

input[type="checkbox"]:disabled + label::before {
	background: gray;
	box-shadow: none;
	color: #555;
	cursor: not-allowed;
}

body {
	font: 150%/1.6 sans-serif;
}


/**
 * Extending the hit area — with generated content
 */

button {
	position: relative;
	padding: .3em .5em;
	background: #58a;
	border-radius: 50%;
	border: 1px solid rgba(0,0,0,.3);
	box-shadow:  0 .1em .2em -.05em rgba(0,0,0,.5);
	color: white;
	font: bold 150%/1 sans-serif;
	cursor: pointer;
}

button:before {
	content: '';
	position: absolute;
	top: -10px; right: -10px;
	bottom: -10px; left: -10px;
}

/**
 * Indicating disabled state
 */

:disabled, [disabled], [aria-disabled="true"] {
	cursor: not-allowed;
}

/**
 * Text on a circle
 */

body {
	font: bold 120% Helvetica, sans-serif;
}

.circular {
	width: 30em;
	height: 30em;
	margin: 4em auto 0;
}

.circular svg {
	display: block;
	overflow: visible;
	transition: 10s linear transform;
}

.circular svg:hover { transform: rotate(-2turn); }

.circular text { fill: currentColor }
.circular path { fill: none; }

/**
 * Extruded text
 */

body {
	background: #58a;
	color: white;
	text-shadow: 0 1px hsl(0,0%,85%),
	             0 2px hsl(0,0%,80%),
	             0 3px hsl(0,0%,75%),
	             0 4px hsl(0,0%,70%),
	             0 5px hsl(0,0%,65%),
	             0 5px 10px black;
	font: bold 500%/1 Rockwell, serif;
}

/**
 * Glowing text
 */

body {
	background: #203;
	font: bold 500%/1 Rockwell, serif;
}

a {
	color: #ffc;
	text-decoration: none;
	transition: 1s;
}

a:hover { text-shadow: 0 0 .1em, 0 0 .3em; }

/**
 * Stroked text
 */

h1 {
	margin: 0;
	color: white;
}

h1:first-child { text-shadow: 1px 1px black, -1px -1px black, 1px -1px black, -1px 1px black; }

h1 text { fill: currentColor }
h1 use {
	stroke: black;
	stroke-width: 6;
	stroke-linejoin: round;
}

body {
	background: deeppink;
	font: bold 200%/1 Rockwell, serif;
}

/**
 * Letterpress
 */

body {
	font: 250%/1.6 Baskerville, Palatino, serif;
}

p {
	padding: .8em 1em;
	background: hsl(210, 13%, 60%);
	color: hsl(210, 13%, 30%);
	text-shadow: 0 1px 1px hsla(0,0%,100%,.8);
}

p + p {
	background: hsl(210, 13%, 30%);
	color: hsl(210, 13%, 60%);
	text-shadow: 0 -1px 1px black;
}

/**
 * Wavy underlines
 */

body {
	font: 250%/1.6 Baskerville, Palatino, serif;
}

a {
	background: linear-gradient(-45deg, transparent 40%, red 0, red 60%, transparent 0) 0 1em,
	            linear-gradient(45deg, transparent 40%, red 0, red 60%, transparent 0) .1em 1em;
	background-repeat: repeat-x;
	background-size: .2em .1em;
	text-shadow: .05em 0 white, -.05em 0 white;
}

/**
 * Custom underlines
 */

body {
	font: 250%/1.6 Baskerville, Palatino, serif;
}

a {
	background: linear-gradient(gray, gray) no-repeat;
	background-size: 100% 1px;
	background-position: 0 1.02em;
	text-shadow: .05em 0 white, -.05em 0 white;
}

p:nth-child(2) a {
	background: linear-gradient(90deg, gray 66%, transparent 0) repeat-x;
	background-size: .2em 2px;
	background-position: 0 1em;
}

/**
 * Fancy Ampersands
 */

@font-face {
	font-family: Ampersand;
	src: local('Baskerville-Italic'), local('GoudyOldStyleT-Italic'), local('Garamond-Italic'), local('Palatino-Italic');
	unicode-range: U+26;
}

h1 {
	font-family: Ampersand, Helvetica, sans-serif;
}

/**
 * Ligatures
 */

body {
	font: 200%/1.6 "Adobe Caslon Pro", Baskerville, serif;
	font-variant-ligatures: common-ligatures discretionary-ligatures historical-ligatures;
}

/**
 * Adjusting tabs
 */

pre {
	padding: .5em;
	line-height: 1.5;
	background: hsl(20, 50%, 95%);
	font-family: Consolas, Monaco, monospace;
}

pre:nth-of-type(2) { tab-size: 2 }
pre:nth-of-type(3) { tab-size: 4 }
pre:nth-of-type(4) { tab-size: 0 }

code {
	font: inherit;
}

/**
 * Zebra striped text lines
 */

pre {
	padding: .5em;
	line-height: 1.5;
	background: hsl(20, 50%, 95%);
	background-image: linear-gradient(
	                  rgba(120,0,0,.1) 50%, transparent 0);
	background-size: auto 3em;
	background-origin: content-box;
	font-family: Consolas, Monaco, monospace;
}

code { font: inherit }

/**
 * Inserting line breaks
 */

dt, dd {
	display: inline;
	margin: 0;
}

dd {
	font-weight: 600;
}

dd + dt::before {
	content: "\A";
	white-space: pre;
}

dd + dd::before {
	content: ', ';
	font-weight: normal;
	margin-left: -.25em;
}

body {
	font: 150%/1.6 Baskerville, Palatino, serif;
}

/**
 * Folded corner mixin
 * http://codepen.io/leaverou/pen/raGaNR
 */

/**
 * Folded corner effect — at an angle
 */

div {
	position: relative;
	width: 12em;
	background: #58a; /* Fallback */
	background: linear-gradient(-150deg, transparent 1.5em, #58a 0);
	padding: 2em;
	color: white;
	font: 100%/1.6 Baskerville, Palatino, serif;
	border-radius: .5em;
}

div::before {
	content: '';
	position: absolute;
	top: 0; right: 0;
	width: 1.73em; height: 3em;
	background: linear-gradient(to left bottom, transparent 50%, rgba(0,0,0,.2) 0, rgba(0,0,0,.4)) 100% 0 no-repeat;
	transform: translateY(-1.3em) rotate(-30deg);
	transform-origin: bottom right;
	border-bottom-left-radius: .5em;
	box-shadow: -.2em .2em .3em -.1em rgba(0,0,0,.15)
}

/**
 * Folded corner effect
 */

div {
	width: 12em;
	background: #58a; /* Fallback */
	background:
		linear-gradient(to left bottom, transparent 50%, rgba(0,0,0,.4) 0) 100% 0 no-repeat,
		linear-gradient(-135deg, transparent 1.5em, #58a 0);
	background-size: 2em 2em, auto;

	padding: 2em;
	color: white;
	font: 100%/1.6 Baskerville, Palatino, serif;
}


/**
 * Frosted glass effect
 */

body {
	min-height: 100vh;
	box-sizing: border-box;
	margin: 0;
	padding-top: calc(50vh - 6em);
	font: 150%/1.6 Baskerville, Palatino, serif;
}

body, main::before {
	background: url("http://csssecrets.io/images/tiger.jpg") 0 / cover fixed;
}

main {
	position: relative;
	margin: 0 auto;
	padding: 1em;
	max-width: 23em;
	background: hsla(0,0%,100%,.25) border-box;
	overflow: hidden;
	border-radius: .3em;
	box-shadow: 0 0 0 1px hsla(0,0%,100%,.3) inset,
	            0 .5em 1em rgba(0, 0, 0, 0.6);
	text-shadow: 0 1px 1px hsla(0,0%,100%,.3);
}

main::before {
	content: '';
	position: absolute;
	top: 0; right: 0; bottom: 0; left: 0;
	margin: -30px;
	z-index: -1;
	-webkit-filter: blur(20px);
	filter: blur(20px);
}

blockquote { font-style: italic }
blockquote cite { font-style: normal; }


/**
 * Color tinting — with blending modes
 * http://thenewcode.com/888/Create-Monochromatic-Color-Tinted-Images-With-CSS-blend
 * http://thenewcode.com/914/Animating-CSS-Background-Blend-Modes
 */

.tinted-image {
	width: 640px; height: 440px;
	background-size: cover;
	background-color: hsl(335, 100%, 50%);
	background-blend-mode: luminosity;
	transition: .5s background-color;
}

.tinted-image:hover {
	background-color: transparent;
}

/**
 * Color tinting — with filters
 */

img {
	max-width: 640px;
	transition: 1s filter, 1s -webkit-filter;
	-webkit-filter: sepia() saturate(4) hue-rotate(295deg);
	filter: sepia() saturate(4) hue-rotate(295deg);
}

img:hover,
img:focus {
	-webkit-filter: none;
	filter: none;
}

/**
 * Irregular drop-shadows
 * Degrades gracefully - if no support, no effect/shadow is applied
 */

div {
	position: relative;
	display: inline-flex;
	flex-direction: column;
	justify-content: center;
	vertical-align: bottom;
	box-sizing: border-box;
	width: 5.9em;
	height: 5.2em;
	margin: .6em;
	background: #fb3;
	/*box-shadow: .1em .1em .3em rgba(0,0,0,.5);*/
	-webkit-filter: drop-shadow(.1em .1em .1em rgba(0,0,0,.5));
	filter: drop-shadow(.1em .1em .1em rgba(0,0,0,.5));
	font: 200%/1.6 Baskerville, Palatino, serif;
	text-align: center;
}

.speech {
	border-radius: .3em;
}

.speech::before {
	content: '';
	position: absolute;
	top: 1em;
	right: -.7em;
	width: 0;
	height: 0;
	border: 1em solid transparent;
	border-left-color: #fb3;
	border-right-width: 0;
}

.dotted {
	background: transparent;
	border: .3em dotted #fb3;
}

.cutout {
	border: .5em solid #58a;
	border-image: 1 url('data:image/svg+xml,\
	                     <svg xmlns="http://www.w3.org/2000/svg"\
		                 width="3" height="3" fill="%23fb3">\
		     	         <polygon points="0,1 1,0 2,0 3,1 3,2 2,3 1,3 0,2"/>\
		     	</svg>');
	background-clip: padding-box;
}

/**
 * Shadow opposite sides
 */

div {
	width: 1.6in;
	height: 1in;
	background: #fb3;
	box-shadow: 5px 0 5px -5px grey,
	           -5px 0 5px -5px grey;
}

/**
 * Same-sided shadow
 */

div {
	width: 1.6in;
	height: 1in;
	background: #fb3;
	box-shadow: 3px 3px 6px -3px black;
}

/**
 * One-sided shadow
 */

div {
	width: 1.6in;
	height: 1in;
	background: #fb3;
	box-shadow: -5px 0px 4px -3px grey;
}

/**
 * Static interpolation via paused animations
 * This technique becomes more useful if you need to interpolate more than 1 properties, and/or if you need multiple values in the spectrum
 * Works in every modern browser except Safari ( June 2015 )
 */

@keyframes foo {
	from { background: red }
	to { background: pink }
}

div {
	display: inline-block;
	width: 100px; height: 100px;

	animation: foo 1s both linear;
	animation-play-state: paused;
}

div:nth-of-type(2) { animation-delay: -.2s; }
div:nth-of-type(3) { animation-delay: -.4s; }
div:nth-of-type(4) { animation-delay: -.6s; }
div:nth-of-type(5) { animation-delay: -.8s; }
div:nth-of-type(6) { animation-delay: -1s; }


/**
 * Pie charts — with SVG
 */

.pie {
	width: 100px;
	height: 100px;
	display: inline-block;
	margin: 10px;
	transform: rotate(-90deg);
}

svg {
	background: yellowgreen;
	border-radius: 20%;
}

circle {
	fill: yellowgreen;
	stroke: #655;
	stroke-width: 32;
}

@keyframes grow { to { stroke-dasharray: 100 100 } }

.pie.animated circle {
	animation: grow 2s infinite linear;
}

/**
 * Static pie charts
 */

.pie {
	display: inline-block;
	position: relative;
	width: 100px;
	line-height: 100px;
	border-radius: 50%;
	background: yellowgreen;
	background-image: linear-gradient(to right, transparent 50%, #655 0);
	color: transparent;
	text-align: center;
}

@keyframes spin {
	to { transform: rotate(.5turn); }
}
@keyframes bg {
	50% { background: #655; }
}

.pie::before {
	content: '';
	position: absolute;
	top: 0; left: 50%;
	width: 50%; height: 100%;
	border-radius: 0 100% 100% 0 / 50%;
	background-color: inherit;
	transform-origin: left;
	animation: spin 50s linear infinite, bg 100s step-end infinite;
	animation-play-state: paused;
	animation-delay: inherit;
}

/**
 * Animated pie chart
 */

.pie {
	width: 100px; height: 100px;
	border-radius: 50%;
	background: yellowgreen;
	background-image: linear-gradient(to right, transparent 50%, currentColor 0);
	color: #655;
}

.pie::before {
	content: '';
	display: block;
	margin-left: 50%;
	height: 100%;
	border-radius: 0 100% 100% 0 / 50%;
	background-color: inherit;
	transform-origin: left;
	animation: spin 3s linear infinite,
						 bg 6s step-end infinite;
}

@keyframes spin {
	to { transform: rotate(.5turn); }
}
@keyframes bg {
	50% { background: currentColor; }
}

/**
 * Trapezoid tabs ( 3D transforms - partial support )
 */

body {
	padding: 40px;
	font: 130%/2 Frutiger LT Std, sans-serif;
}

nav {
	position: relative;
	z-index: 1;
	padding-left: 1em;
}

nav > a {
	position: relative;
	display: inline-block;
	padding: .3em 1em 0;
	color: inherit;
	text-decoration: none;
	margin: 0 -.3em;
}

nav > a::before,
main {
	border: .1em solid rgba(0,0,0,.4);
}

nav a::before {
	content: ''; /* To generate the box */
	position: absolute;
	top: 0; right: 0; bottom: 0; left: 0;
	z-index: -1;
	border-bottom: none;
	border-radius: .5em .5em 0 0;
	background: #ccc linear-gradient(hsla(0,0%,100%,.6), hsla(0,0%,100%,0));
	box-shadow: 0 .15em white inset;
	transform: scale(1.1, 1.3) perspective(.5em) rotateX(5deg);
	transform-origin: bottom;
}

nav a.selected { z-index: 2;}

nav a.selected::before {
	background-color: #eee;
	margin-bottom: -.08em;
}

main {
	display: block;
	margin-bottom: 1em;
	background: #eee;
	padding: 1em;
	border-radius: .15em;
}

nav.left > a::before {
	transform: scale(1.2, 1.3) perspective(.5em) rotateX(5deg);
	transform-origin: bottom left;
}

nav.right { padding-left: 2em; }

nav.right > a::before {
	transform: scale(1.2, 1.3) perspective(.5em) rotateX(5deg);
	transform-origin: bottom right;
}


/**
 * Beveled corners — with clip-path ( bad support )
 */

div {
	background: #58a;
	-webkit-clip-path:
		polygon(20px 0, calc(100% - 20px) 0, 100% 20px, 100% calc(100% - 20px),
		calc(100% - 20px) 100%,
		20px 100%, 0 calc(100% - 20px), 0 20px);
	clip-path:
	 		polygon(20px 0, calc(100% - 20px) 0, 100% 20px, 100% calc(100% - 20px),
	 		calc(100% - 20px) 100%,
	 		20px 100%, 0 calc(100% - 20px), 0 20px);

	padding: 1em 1.2em;
	max-width: 12em;
	color: white;
	font: 150%/1.6 Baskerville, Palatino, serif;
}


/**
 * Beveled corners — with border-image and an inline SVG
 */

div {
	border: 21px solid transparent;
	border-image: 1 url('data:image/svg+xml,\
	                      <svg xmlns="http://www.w3.org/2000/svg" width="3" height="3" fill="%2358a">\
	                      <polygon points="0,1 1,0 2,0 3,1 3,2 2,3 1,3 0,2" />\
	                      </svg>');
	background: #58a;
	background-clip: padding-box;

	padding: .2em .3em;
	max-width: 12em;
	color: white;
	font: 150%/1.6 Baskerville, Palatino, serif;
}


/**
 * Scoop ( inner border radius ) corners
 *
 */

div {
	background: #58a;
	background:	radial-gradient(circle at top left, transparent 15px, #58a 0) top left,
	            radial-gradient(circle at top right, transparent 15px, #58a 0) top right,
	            radial-gradient(circle at bottom right, transparent 15px, #58a 0) bottom right,
	            radial-gradient(circle at bottom left, transparent 15px, #58a 0) bottom left;
	background-size: 50% 50%;
	background-repeat: no-repeat;

	padding: 1em 1.2em;
	max-width: 12em;
	color: white;
	font: 130%/1.6 Baskerville, Palatino, serif;
}


/**
 * Beveled ( cutout ) corners — with gradients
 * Use preprocessor mixin to make it more maintainable
 */

div {
	background: #58a;
	background: linear-gradient(135deg, transparent 15px, #58a 0) top left,
	            linear-gradient(-135deg, transparent 15px, #58a 0) top right,
	            linear-gradient(-45deg, transparent 15px, #58a 0) bottom right,
	            linear-gradient(45deg, transparent 15px, #58a 0) bottom left;
	background-size: 50% 50%;
	background-repeat: no-repeat;

	padding: 1em 1.2em;
	max-width: 12em;
	color: white;
	font: 150%/1.6 Baskerville, Palatino, serif;
}

/**
 * Diamond images — via clip-path
 */

 /* Bad browser support as of April 2017 */

img {
	max-width: 250px;
	margin: 20px;
	-webkit-clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
	clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
	transition: 1s;
}

img:hover {
	-webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
	clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
}

/**
 * Diamond images — via transforms
 */

.diamond {
	width: 250px;
	height: 250px;
	transform: rotate(45deg);
	overflow: hidden;
	margin: 100px;
}

.diamond img {
	max-width: 100%;
	transform: rotate(-45deg) scale(1.42);
	z-index: -1;
	position: relative;
}

/**
 * Parallelograms — with pseudoelements
 */

.button {
	position: relative;
	display: inline-block;
	padding: .5em 1em;
	border: 0; margin: .5em;
	background: transparent;
	color: white;
	text-transform: uppercase;
	text-decoration: none;
	font: bold 200%/1 sans-serif;
}

.button::before {
	content: ''; /* To generate the box */
	position: absolute;
	top: 0; right: 0; bottom: 0; left: 0;
	z-index: -1;
	background: #58a;
	transform: skew(45deg);
}

/**
 * Flexible quarter ellipse
 */

div {
	display: inline-block;
	width: 16em;
	height: 10em;
	margin: 1em;
	background: #fb3;
	border-radius: 100% 0 0 0;
}

div:nth-of-type(2) { border-radius: 0 100% 0 0; }
div:nth-of-type(3) { border-radius: 0 0 100% 0; }
div:nth-of-type(4) { border-radius: 0 0 0 100%; }

/**
 * Flexible half ellipse
 */

div {
	display: inline-block;
	width: 16em;
	height: 10em;
	margin: 1em;
	background: #fb3;
	border-radius: 50% / 100% 100% 0 0;
}

div:nth-of-type(2) { border-radius: 50% / 0 0 100% 100%; }
div:nth-of-type(3) { border-radius: 100% 0 0 100% / 50%; }
div:nth-of-type(4) { border-radius: 0 100% 100% 0 / 50%; }

/**
 * Flexible ellipse
 */

div {
	width: 16em;
	height: 10em;
	background: #fb3;
	border-radius: 50%;
}

/**
 * Footnote-style border
 */

.footnote {
	border-top: .15em solid transparent;
	border-image: 100% 0 0 linear-gradient(90deg, currentColor 4em, transparent 0);
	padding-top: .5em;
	font: 220%/1.4 Baskerville, Palatino, serif;
}

/**
 * Marching ants border
 */

@keyframes ants { to { background-position: 100% 100% } }

div {
	padding: 1em;
	border: 1px solid transparent;
	background: linear-gradient(white, white) padding-box,
	            repeating-linear-gradient(-45deg, black 0, black 25%, transparent 0, transparent 50%) 0 / .6em .6em;
	animation: ants 12s linear infinite;

	max-width: 20em;
	font: 100%/1.6 Baskerville, Palatino, serif;
}

/**
 * Vintage envelope themed border via border-image
 */

div {
	padding: 1em;
	border: 16px solid transparent;
	border-image: 16 repeating-linear-gradient(-45deg, red 0, red 1em, transparent 0, transparent 2em,
	              #58a 0, #58a 3em, transparent 0, transparent 4em);

	max-width: 20em;
	font: 100%/1.6 Baskerville, Palatino, serif;
}

/**
 * Vintage envelope themed border
 */

div {
	padding: 1em;
	border: 1em solid transparent;
	background: linear-gradient(white, white) padding-box,
	            repeating-linear-gradient(-45deg, red 0, red 12.5%, transparent 0, transparent 25%,
	              #58a 0, #58a 37.5%, transparent 0, transparent 50%) 0 / 6em 6em;

	max-width: 20em;
	font: 100%/1.6 Baskerville, Palatino, serif;
}

/**
 * Continuous image borders
 */

div {
	border: 1em solid transparent;
	background: linear-gradient(white, white) padding-box,
	            url(http://csssecrets.io/images/stone-art.jpg) border-box  0 / cover;

	/* Styling & enable resize */
	width: 21em;
	padding: 1em;
	overflow: hidden;
	resize: both;
	font: 100%/1.6 Baskerville, Palatino, serif;
}


div {
	/**
	 * Pseudorandom stripes
	 */

	background: hsl(20, 40%, 90%);
	background-image:
		linear-gradient(90deg, #fb3 11px, transparent 0),
		linear-gradient(90deg, #ab4 23px, transparent 0),
		linear-gradient(90deg, #655 23px, transparent 0);
	background-size: 83px 100%, 61px 100%, 41px 100%;
}

/**
 * The cicada principle in animations
 * Remember the cicada principle that used prime numbers to make multiple overlaid repeated backgrounds seem more random?
 * There’s no reason it can’t be applied to repeating linear animations too (using primes for the durations, divided by 10)
 * http://thenewcode.com/840/Brood-X-Visualizing-The-Cicada-Principle-In-CSS
 */

@keyframes spin { to { transform: rotate(1turn); } }
@keyframes radius { 50% { border-radius: 50%; } }
@keyframes color { 33% { color: orange; } 66% { color: deeppink } }
@keyframes width { 50% { border-width: .3em; } }

.loading:before {
	content: '';
	display: block;
	width: 4em;
	height: 4em;
	margin: 0 auto 1em;
	border: 1.5em solid;
	color: yellowgreen;
	box-sizing: border-box;
	animation: 1s spin, .7s radius, 1.1s color, 1.3s width;
	animation-timing-function: linear;
	animation-iteration-count: infinite;
}

.loading {
	margin: auto;
}

body {
	margin: 0;
	display: flex;
	min-height: 100vh;
	text-align: center;
	background: #655;
	color: white;
}


/*

Check bennettfeely.com/gradients ; combining patterns with blending modes ( not widely supported as of April 2017 )

*/

div {
	/**
 * Checkerboard with SVG
 */

background: #eee url('data:image/svg+xml,\
            <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill-opacity=".25" >\
            <rect x="50" width="50" height="50" />\
            <rect y="50" width="50" height="50" />\
            </svg>');
background-size: 30px 30px;
}

div {
	/**
 * Checkerboard
 */

background:blue;
background-image:
	linear-gradient(45deg, rgba(0,0,0,.25) 25%, transparent 0, transparent 75%, rgba(0,0,0,.25) 0),
	linear-gradient(45deg, rgba(0,0,0,.25) 25%, transparent 0, transparent 75%, rgba(0,0,0,.25) 0);
background-position: 0 0, 15px 15px;
background-size: 30px 30px;

min-height: 100%;
}

div {
	/**
 * Polka dot
 */

background: #655;
background-image: radial-gradient(tan 20%, transparent 0),
                  radial-gradient(red 20%, transparent 0);
background-size: 30px 30px;
background-position: 0 0, 15px 15px;
}

div {
	/**
 * Blueprint grid
 */

background: #58a;
background-image: linear-gradient(white 2px, transparent 0),
                  linear-gradient(90deg, white 2px, transparent 0),
                  linear-gradient(hsla(0,0%,100%,.3) 1px, transparent 0),
                  linear-gradient(90deg, hsla(0,0%,100%,.3) 1px, transparent 0);
background-size: 50px 50px, 50px 50px,
                 10px 10px, 10px 10px;
}

div{
	/**
 * Subtle stripes
 */

background: #58a;
background-image: repeating-linear-gradient(30deg,
              hsla(0,0%,100%,.1), hsla(0,0%,100%,.1) 15px,
              transparent 0, transparent 30px);

height: 100vh;
}

/**
 * Diagonal stripes - repeating-linear-gradient() method
 */
div {
	background: repeating-linear-gradient(60deg,
	              #fb3, #fb3 15px,
	              #58a 0, #58a 30px);

	height: 100%;

}

/**
 * Diagonal stripes - linear-gradient() method
 */

div {
	/* background: linear-gradient(45deg, #fb3 50%, #58a 0); */
	background: linear-gradient(45deg,
	              #fb3 50%, #58a 0, #58a 50%,
	              #fb3 0, #fb3 75%, #58a 0);
	background-size: 42.4px 42.4px;

}

/* Vertical stripes */

div {
	background: linear-gradient(to right, #fb3 50%, #58a 0);
	background-size: 30px 100%;
}

/* Horizontal stripes */
/*background: linear-gradient(#fb3 50%, #58a 0);*/
div {
	background: linear-gradient(#fb3 33.3%, #58a 0, #58a 66.6%, pink 0);
	background-size: 100% 30px;

}

/* Inner rounding */
div {
	outline: .6em solid #655;
	box-shadow: 0 0 0 .4em #655; /* box-shadow[3] === border-radius/2, sort of...; also consider outline in the mix */

	max-width: 10em;
	border-radius: .8em;
	padding: 1em;
	margin: 1em;
	background: tan;
	font: 100%/1.5 sans-serif;
}

/* Flexible background positioning via extended background-position */
div {
	background: url(http://csssecrets.io/images/code-pirate.svg)
	            no-repeat bottom right #58a;
	background-origin: content-box; /* Offsets position as much as the value of padding; so there is only one place to change the value */

	/* Styling */
	max-width: 10em;
	min-height: 5em;
	padding: 40px;
	color: white;
	font: 100%/1 sans-serif;
}

/* Multiple borders */
div {
	width: 100px;
	height: 60px;
	margin: 25px;
	border-radius: 50%;
	background: yellowgreen;
	box-shadow: 0 0 0 10px #655,
            0 0 0 13px rgba(0,0,0,0),
            0 0 0 16px deeppink,
            0 0 0 20px rgba(0,0,0,.6);
}

/* inherit keyword */
input, select, button {
    font: inherit;
}

a {
    color: inherit;
}

.callout {
    position: relative;
}

.callout::before {
    content: "";
    position: absolute;
    top: -.4em; left: 1em;
    padding: .35em;
    background: inherit;
    border: inherit;
    border-right: 0;
    border-bottom: 0;
    transform: rotate(45deg);
}

/* currentColor */
hr {
    height: .5em;
    background: currentColor;
}

/* hsla button variations */
.hsla-button.ok {
    background-color: #c00;
}

.hsla-button.cancel {
    background-color: #6b0;
}

/* hsla instead of rgba */
.hsla-button {
    padding: .3em .8em;
    border: 1px solid rgba(0, 0, 0, .1);
    background: #58a linear-gradient(hsla(0, 0%, 100%, .2), transparent);
    border-radius: .2em;
    box-shadow: 0 .05em .25em rgba(0,0,0,.5);
    color: white;
    text-shadow: 0 -.05em -.05em rgba(0,0,0,.5);
    font-size: 125%;
    line-height: 1.5;
}

/* Relative units, scaling */
.minimize-button-relative {
    padding: .3em .8em;
    border: 1px solid #446d88;
    background: #58a linear-gradient(#77a0bb, #58a);
    border-radius: .2em;
    box-shadow: 0 .05em .25em gray;
    color: white;
    text-shadow: 0 -.05em .05em #335166;
    font-size: 125%;
    line-height: 1.5;
}


/* Minimize code duplication */
.minimize-button{
    padding: 6px 16px;
    border: 1px solid #446d88;
    background: #58a linear-gradient(#77a0bb, #58a);
    border-radius: 4px;
    box-shadow: 0 1px 5px gray;
    color: white;
    text-shadow: 0 -1px 1px #335166;
    /*font-size: 20px;*/
    font-size: 125%; /* assuming 16px font-size */
    /*line-height: 30px;*/
    line-height: 1.5;
}


 /* Test */
body{
    background: lightgray;
}
